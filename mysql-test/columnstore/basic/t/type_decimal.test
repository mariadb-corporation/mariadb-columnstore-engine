--source ../include/have_columnstore.inc
--source ../include/combinations.myisam-columnstore.inc

#CREATE TABLE t1 (a INT) ENGINE=ColumnStore COMMENT='SCHEMA SYNC ONLY';
#DROP TABLE t1;

--echo #
--echo # MCOL-4531 New string-to-decimal conversion implementation
--echo #

--echo # Garbage at various places of the grammar

--disable_warnings
DROP DATABASE IF EXISTS type_decimal_db;
--enable_warnings

CREATE DATABASE type_decimal_db; 
USE type_decimal_db;

CREATE TABLE t1 (a VARCHAR(128));

INSERT INTO t1 VALUES
(' '),
(' garbage'),
('garbage');

# <signed numeric literal> := [ <sign> ] <unsigned numeric literal>
INSERT INTO t1 VALUES
('+garbage'),
('-garbage'),
('1garbage'),
('+1garbage'),
('-1garbage');

# <unsigned numeric literal>  ::=   <exact numeric literal> [ E <exponent> ]
INSERT INTO t1 VALUES
('1garbage'),
('1egarbage'),
('1Egarbage'),
('1e+garbage'),
('1E-garbage'),
('1e+0garbage'),
('1E-0garbage');


# <exact numeric literal>    ::=
#                    <unsigned integer> [ <period> [ <unsigned integer> ] ]
#                |   <period> <unsigned integer>

INSERT INTO t1 VALUES
('1.garbage'),
('1.1garbage');

INSERT INTO t1 VALUES
('.garbage'),
('.1garbage');

--disable_warnings
SELECT CAST(a AS DECIMAL(20,2)), a FROM t1;
--enable_warnings

DROP TABLE t1;


--echo # Testing various mantissa values

CREATE TABLE t1 (a VARCHAR(128));

BEGIN;
DELIMITER $$;
FOR i IN 1..40 DO
  INSERT INTO t1 VALUES (REPEAT('9',i));
  INSERT INTO t1 VALUES (REPEAT('8',i));
  INSERT INTO t1 VALUES (REPEAT('7',i));
  INSERT INTO t1 VALUES (REPEAT('6',i));
  INSERT INTO t1 VALUES (REPEAT('5',i));
  INSERT INTO t1 VALUES (REPEAT('4',i));
  INSERT INTO t1 VALUES (REPEAT('3',i));
  INSERT INTO t1 VALUES (REPEAT('2',i));
  INSERT INTO t1 VALUES (REPEAT('1',i));
END FOR;
$$
DELIMITER ;$$
COMMIT;

--disable_warnings
SELECT LENGTH(a), a, CAST(a AS DECIMAL(38,2)) FROM t1 ORDER BY LENGTH(a), a;
SELECT LENGTH(a), a, CAST(CONCAT('+',a) AS DECIMAL(38,2)) FROM t1 ORDER BY LENGTH(a), a;
SELECT LENGTH(a), a, CAST(CONCAT('-',a) AS DECIMAL(38,2)) FROM t1 ORDER BY LENGTH(a), a;
--enable_warnings

DROP TABLE t1;


--echo # Testing various exponent values

CREATE TABLE t1 (mantissa VARCHAR(128));

BEGIN;
INSERT INTO t1 VALUES ('10000000000000000000000000000000000000');
INSERT INTO t1 VALUES ('10000000000000');
INSERT INTO t1 VALUES ('1000');
INSERT INTO t1 VALUES ('10');
INSERT INTO t1 VALUES ('1');
INSERT INTO t1 VALUES ('0');
INSERT INTO t1 VALUES ('.1');
INSERT INTO t1 VALUES ('.01');
INSERT INTO t1 VALUES ('.0001');
INSERT INTO t1 VALUES ('.00000000000001');
INSERT INTO t1 VALUES ('.00000000000000000000000000000000000001');
COMMIT;

--disable_warnings
DELIMITER $$;
FOR exponent IN -50..50 DO
  SELECT LPAD(CONCAT(mantissa, 'e', exponent),50) AS a, CAST(CONCAT(mantissa, 'e', exponent) AS DECIMAL(38,0)) AS d38_0 FROM t1 ORDER BY CAST(mantissa AS DOUBLE);
END FOR;
$$
DELIMITER ;$$
--enable_warnings


--disable_warnings
DELIMITER $$;
FOR i IN 1..40 DO
  BEGIN
    DECLARE exponent VARCHAR(128) DEFAULT CONCAT('-',REPEAT('1',i));
    SELECT LPAD(CONCAT(mantissa, 'e', exponent),80) AS a, CAST(CONCAT(mantissa, 'e', exponent) AS DECIMAL(38,0)) AS d38_0 FROM t1 ORDER BY CAST(mantissa AS DOUBLE);
  END;
END FOR;
$$
DELIMITER ;$$
--enable_warnings


--disable_warnings
DELIMITER $$;
FOR i IN 1..40 DO
  BEGIN
    DECLARE exponent VARCHAR(128) DEFAULT REPEAT('1',i);
    SELECT LPAD(CONCAT(mantissa, 'e', exponent),80) AS a, CAST(CONCAT(mantissa, 'e', exponent) AS DECIMAL(38,0)) AS d38_0 FROM t1 ORDER BY CAST(mantissa AS DOUBLE);
  END;
END FOR;
$$
DELIMITER ;$$
--enable_warnings

DROP TABLE t1;


--echo #
--echo # MCOL-4532 CAST(AS DECIMAL) returns a garbage for large values
--echo #

CREATE TABLE t1 (a VARCHAR(64));
DELIMITER $$;
FOR i IN 1..9 DO
  INSERT INTO t1 VALUES (REPEAT(i,37));
  INSERT INTO t1 VALUES (REPEAT(i,38));
  INSERT INTO t1 VALUES (REPEAT(i,39));
END FOR;
$$
DELIMITER ;$$
--disable_warnings
SELECT LENGTH(a), a, CAST(a AS DECIMAL(37,1)) FROM t1 ORDER BY LENGTH(a), a;
SELECT LENGTH(a), a, CAST(a AS DECIMAL(37,2)) FROM t1 ORDER BY LENGTH(a), a;
SELECT LENGTH(a), a, CAST(a AS DECIMAL(38,0)) FROM t1 ORDER BY LENGTH(a), a;
SELECT LENGTH(a), a, CAST(a AS DECIMAL(38,1)) FROM t1 ORDER BY LENGTH(a), a;
SELECT LENGTH(a), a, CAST(a AS DECIMAL(38,2)) FROM t1 ORDER BY LENGTH(a), a;
--enable_warnings
DROP TABLE t1;


--echo #
--echo # MCOL-4500 Bit functions processing throws internally trying to cast char into decimal representation
--echo #

CREATE TABLE t1 (d decimal(18,2), c char(1));
INSERT INTO t1 VALUES (42, 'z');
--disable_warnings
SELECT d & c FROM t1;
--enable_warnings
DROP TABLE t1;


--echo #
--echo # MDEV-24790 CAST('0e1111111111' AS DECIMAL(38,0)) returns a wrong result
--echo #

CREATE TABLE t1 (a VARCHAR(128));
INSERT INTO t1 VALUES
('0e111111111'),
('0e1111111111'),
('.00000000000000000000000000000000000000e111111111111111111111'),
('.00000000000000000000000000000000000001e111111111111111111111'),
('0e-111111111'),
('0e-1111111111'),
('.00000000000000000000000000000000000000e-111111111111111111111'),
('.00000000000000000000000000000000000001e-111111111111111111111');
--disable_warnings
SELECT a, CAST(a AS DECIMAL(38,0)) FROM t1 ORDER BY LENGTH(a), a;
--enable_warnings
DROP TABLE t1;


--echo #
--echo # MCOL-4604 CHAR(negativeWideDecimal) not behaving as InnoDB
--echo #

CREATE TABLE t1 (a DECIMAL(10,0));
INSERT INTO t1 VALUES (-1);
SELECT HEX(CHAR(a USING latin1)) FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a DECIMAL(30,0));
INSERT INTO t1 VALUES (-1);
SELECT HEX(CHAR(a USING latin1)) FROM t1;
DROP TABLE t1;


--echo #
--echo # MCOL-4640 Narrow DECIMAL precision loss in CAST(AS SIGNED) and CHAR()
--echo #

CREATE TABLE t1 (a DECIMAL(17,1));
INSERT INTO t1 VALUES (8999999999999999.0);
SELECT CAST(a AS SIGNED), HEX(CHAR(a USING latin1)) FROM t1;
DROP TABLE t1;

--echo #
--echo # MCOL-4600 CAST(decimal AS SIGNED/UNSIGNED) returns a wrong result
--echo #

CREATE TABLE t1 (a DECIMAL(18,17));
INSERT INTO t1 VALUES (-9.49999999999999999);
INSERT INTO t1 VALUES (9.49999999999999999);
--disable_warnings
SELECT a, CAST(a AS UNSIGNED), CAST(a AS SIGNED) FROM t1;
--enable_warnings
DROP TABLE t1;


--echo #
--echo #  MCOL-4609 TreeNode::getIntVal() does not round: implicit DECIMAL->INT cast is not MariaDB compatible
--echo #

CREATE TABLE t1 (a DECIMAL(10,1));
INSERT INTO t1 VALUES (1.4),(1.5);
SELECT a, RAND(a), RAND(CAST(a AS DECIMAL(10,1))) FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a DECIMAL(30,1));
INSERT INTO t1 VALUES (1.4),(1.5);
SELECT a, RAND(a), RAND(CAST(a AS DECIMAL(10,1))) FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a DECIMAL(10,1));
INSERT INTO t1 VALUES (1.4),(1.5);
SELECT TRUNCATE(1.2345, a) FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a DECIMAL(30,1));
INSERT INTO t1 VALUES (1.4),(1.5);
SELECT TRUNCATE(1.2345, a) FROM t1;
DROP TABLE t1;


CREATE TABLE t1 (a DECIMAL(10,1));
INSERT INTO t1 VALUES (15.4),(15.5),(16.0);
SELECT a, CONV(16,a,10) FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a DECIMAL(30,1));
INSERT INTO t1 VALUES (15.4),(15.5),(16.0);
SELECT a, CONV(16,a,10) FROM t1;
DROP TABLE t1;


--echo #
--echo # MCOL-4610 TreeNode::getUintVal() looses precision for narrow decimal
--echo #

CREATE TABLE t1 (a DECIMAL(18,0));
INSERT INTO t1 VALUES (9999999999999999);
INSERT INTO t1 VALUES (99999999999999998);
INSERT INTO t1 VALUES (999999999999999997);
SELECT a, CAST(a DIV 1 AS UNSIGNED) FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a DECIMAL(30,0));
INSERT INTO t1 VALUES (9999999999999999);
INSERT INTO t1 VALUES (99999999999999998);
INSERT INTO t1 VALUES (999999999999999997);
SELECT a, CAST(a DIV 1 AS UNSIGNED) FROM t1;
DROP TABLE t1;


--echo #
--echo # MCOL-4619 TreeNode::getUintVal() does not round: Implicit DECIMAL->UINT conversion is not like in InnoDB
--echo #

CREATE TABLE t1 (a VARCHAR(32), d DECIMAL(10,1));
INSERT INTO t1 VALUES ('aaaa', 1.5);
SELECT LEFT(a, d) FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a VARCHAR(32), d DECIMAL(30,1));
INSERT INTO t1 VALUES ('aaaa', 1.5);
SELECT LEFT(a, d) FROM t1;
DROP TABLE t1;


--echo #
--echo # MCOL-4650 TreeNode::getIntVal() looses precision for narrow decimal
--echo #

CREATE TABLE t1 (a DECIMAL(18,0));
INSERT INTO t1 VALUES (9999999999999999);
INSERT INTO t1 VALUES (99999999999999998);
INSERT INTO t1 VALUES (999999999999999997);
SELECT RAND(a) FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a DECIMAL(30,0));
INSERT INTO t1 VALUES (9999999999999999);
INSERT INTO t1 VALUES (99999999999999998);
INSERT INTO t1 VALUES (999999999999999997);
SELECT RAND(a) FROM t1;
DROP TABLE t1;


--echo #
--echo # MCOL-4651 SEC_TO_TIME(hugePositiveDecimal) returns a negative time
--echo #

CREATE TABLE t1 (a DECIMAL(30,1));
INSERT INTO t1 VALUES (9223372036854775807.0);
INSERT INTO t1 VALUES (9223372036854775807.5);
INSERT INTO t1 VALUES (18446744073709551615.0);
INSERT INTO t1 VALUES (18446744073709551615.5);
--disable_warnings
--replace_result 838:59:59.0 838:59:59.9
SELECT a, SEC_TO_TIME(a) FROM t1 ORDER BY a;
--enable_warnings
DROP TABLE t1;


--echo #
--echo # MCOL-4618 FLOOR(-9999.0) returns a bad result
--echo #

CREATE TABLE t1 (d DECIMAL(18,1));
INSERT INTO t1 VALUES (-9999.0);
SELECT  d, FLOOR(d) FROM t1;
DROP TABLE t1;

--echo #
--echo # MCOL-4653 CEIL(negativeNarrowDecimal) returns a wrong result
--echo #

CREATE TABLE t1 (a DECIMAL(10,1));
INSERT INTO t1 VALUES (-1.6);
# ColumnStore returns NULL. Other engines return empty strings.
# This condition works for ColumnStore and for all other engines:
SELECT * FROM t1 WHERE LEFT('abc', CEIL(a))='';
DROP TABLE t1;

--echo #
--echo # General FLOOR, CEIL, ROUND tests
--echo #

CREATE TABLE t1 (d DECIMAL(18,1));
INSERT INTO t1 VALUES (-9999.0),(-9999.4),(-9999.5);
INSERT INTO t1 VALUES (9999.0),(9999.4),(9999.5);
SELECT  d, FLOOR(d), ROUND(d), CEIL(d) FROM t1 ORDER BY d;
SELECT d, FLOOR(d)+0.0, ROUND(d)+0.0, CEIL(d)+0.0 FROM t1 ORDER BY d;
DROP TABLE t1;

CREATE TABLE t1 (d DECIMAL(30,1));
INSERT INTO t1 VALUES (-9999.0),(-9999.4),(-9999.5);
INSERT INTO t1 VALUES (9999.0),(9999.4),(9999.5);
SELECT  d, FLOOR(d), ROUND(d), CEIL(d) FROM t1 ORDER BY d;
SELECT d, FLOOR(d)+0.0, ROUND(d)+0.0, CEIL(d)+0.0 FROM t1 ORDER BY d;
DROP TABLE t1;


--echo #
--echo # MCOL-4615 GROUP_CONCAT() precision loss for huge narrow decimal
--echo #

CREATE TABLE t1 (a DECIMAL(17,1));
INSERT INTO t1 VALUES (-8999999999999999.9);
SELECT GROUP_CONCAT(a) FROM t1;
DROP TABLE t1;


--echo #
--echo # MCOL-4660 Narow decimal to string conversion is inconsistent about zero integral
--echo #

CREATE TABLE t1 (a DECIMAL(10,3));
INSERT INTO t1 VALUES
(-0.009),(-0.09),(-0.9),
(0),
(+0.009),(+0.09),(+0.9);
SELECT CONCAT(a), CAST(a AS CHAR) FROM t1 ORDER BY a;
SELECT GROUP_CONCAT(a ORDER BY a) FROM t1;
DROP TABLE t1;

CREATE TABLE t1 (a DECIMAL(18,17));
INSERT INTO t1 VALUES
(-0.00000000000000009),
(-0.0000000000000009),
(-0.000000000000009),
(0),
(+0.000000000000009),
(+0.0000000000000009),
(+0.00000000000000009);
SELECT CONCAT(a), CAST(a AS CHAR) FROM t1 ORDER BY a;
SELECT GROUP_CONCAT(a ORDER BY a) FROM t1;
DROP TABLE t1;
DROP DATABASE type_decimal_db;

