/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "querytele_types.h"

#include <algorithm>

namespace querytele
{

int _kQTTypeValues[] =
{
    QTType::QT_INVALID,
    QTType::QT_SUMMARY,
    QTType::QT_PROGRESS,
    QTType::QT_START
};
const char* _kQTTypeNames[] =
{
    "QT_INVALID",
    "QT_SUMMARY",
    "QT_PROGRESS",
    "QT_START"
};
const std::map<int, const char*> _QTType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kQTTypeValues, _kQTTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSTTypeValues[] =
{
    STType::ST_INVALID,
    STType::ST_SUMMARY,
    STType::ST_PROGRESS,
    STType::ST_START
};
const char* _kSTTypeNames[] =
{
    "ST_INVALID",
    "ST_SUMMARY",
    "ST_PROGRESS",
    "ST_START"
};
const std::map<int, const char*> _STType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kSTTypeValues, _kSTTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kStepTypeValues[] =
{
    StepType::T_INVALID,
    StepType::T_HJS,
    StepType::T_DSS,
    StepType::T_CES,
    StepType::T_SQS,
    StepType::T_TAS,
    StepType::T_TNS,
    StepType::T_BPS,
    StepType::T_TCS,
    StepType::T_HVS,
    StepType::T_WFS,
    StepType::T_SAS,
    StepType::T_TUN
};
const char* _kStepTypeNames[] =
{
    "T_INVALID",
    "T_HJS",
    "T_DSS",
    "T_CES",
    "T_SQS",
    "T_TAS",
    "T_TNS",
    "T_BPS",
    "T_TCS",
    "T_HVS",
    "T_WFS",
    "T_SAS",
    "T_TUN"
};
const std::map<int, const char*> _StepType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(13, _kStepTypeValues, _kStepTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kITTypeValues[] =
{
    ITType::IT_INVALID,
    ITType::IT_SUMMARY,
    ITType::IT_PROGRESS,
    ITType::IT_START,
    ITType::IT_TERM
};
const char* _kITTypeNames[] =
{
    "IT_INVALID",
    "IT_SUMMARY",
    "IT_PROGRESS",
    "IT_START",
    "IT_TERM"
};
const std::map<int, const char*> _ITType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kITTypeValues, _kITTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* QueryTele::ascii_fingerprint = "E179941E2BE9C920811D86261E5AAE67";
const uint8_t QueryTele::binary_fingerprint[16] = {0xE1, 0x79, 0x94, 0x1E, 0x2B, 0xE9, 0xC9, 0x20, 0x81, 0x1D, 0x86, 0x26, 0x1E, 0x5A, 0xAE, 0x67};

uint32_t QueryTele::read(::apache::thrift::protocol::TProtocol* iprot)
{

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true)
    {
        xfer += iprot->readFieldBegin(fname, ftype, fid);

        if (ftype == ::apache::thrift::protocol::T_STOP)
        {
            break;
        }

        switch (fid)
        {
            case 1:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->query_uuid);
                    this->__isset.query_uuid = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 2:
                if (ftype == ::apache::thrift::protocol::T_I32)
                {
                    int32_t ecast0;
                    xfer += iprot->readI32(ecast0);
                    this->msg_type = (QTType::type)ecast0;
                    this->__isset.msg_type = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 3:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->max_mem_pct);
                    this->__isset.max_mem_pct = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 4:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->num_files);
                    this->__isset.num_files = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 5:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->phy_io);
                    this->__isset.phy_io = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 6:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->cache_io);
                    this->__isset.cache_io = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 7:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->msg_rcv_cnt);
                    this->__isset.msg_rcv_cnt = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 8:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->cp_blocks_skipped);
                    this->__isset.cp_blocks_skipped = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 9:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->msg_bytes_in);
                    this->__isset.msg_bytes_in = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 10:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->msg_bytes_out);
                    this->__isset.msg_bytes_out = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 11:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->rows);
                    this->__isset.rows = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 12:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->start_time);
                    this->__isset.start_time = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 13:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->end_time);
                    this->__isset.end_time = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 14:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->error_no);
                    this->__isset.error_no = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 15:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->blocks_changed);
                    this->__isset.blocks_changed = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 16:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->session_id);
                    this->__isset.session_id = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 17:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->query_type);
                    this->__isset.query_type = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 18:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->query);
                    this->__isset.query = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 19:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->user);
                    this->__isset.user = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 20:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->host);
                    this->__isset.host = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 21:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->priority);
                    this->__isset.priority = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 22:
                if (ftype == ::apache::thrift::protocol::T_I32)
                {
                    xfer += iprot->readI32(this->priority_level);
                    this->__isset.priority_level = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 23:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->system_name);
                    this->__isset.system_name = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 24:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->module_name);
                    this->__isset.module_name = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 25:
                if (ftype == ::apache::thrift::protocol::T_I32)
                {
                    xfer += iprot->readI32(this->local_query);
                    this->__isset.local_query = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 26:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->schema_name);
                    this->__isset.schema_name = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            default:
                xfer += iprot->skip(ftype);
                break;
        }

        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t QueryTele::write(::apache::thrift::protocol::TProtocol* oprot) const
{
    uint32_t xfer = 0;
    xfer += oprot->writeStructBegin("QueryTele");

    xfer += oprot->writeFieldBegin("query_uuid", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->query_uuid);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("msg_type", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->msg_type);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.max_mem_pct)
    {
        xfer += oprot->writeFieldBegin("max_mem_pct", ::apache::thrift::protocol::T_I64, 3);
        xfer += oprot->writeI64(this->max_mem_pct);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.num_files)
    {
        xfer += oprot->writeFieldBegin("num_files", ::apache::thrift::protocol::T_I64, 4);
        xfer += oprot->writeI64(this->num_files);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.phy_io)
    {
        xfer += oprot->writeFieldBegin("phy_io", ::apache::thrift::protocol::T_I64, 5);
        xfer += oprot->writeI64(this->phy_io);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.cache_io)
    {
        xfer += oprot->writeFieldBegin("cache_io", ::apache::thrift::protocol::T_I64, 6);
        xfer += oprot->writeI64(this->cache_io);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.msg_rcv_cnt)
    {
        xfer += oprot->writeFieldBegin("msg_rcv_cnt", ::apache::thrift::protocol::T_I64, 7);
        xfer += oprot->writeI64(this->msg_rcv_cnt);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.cp_blocks_skipped)
    {
        xfer += oprot->writeFieldBegin("cp_blocks_skipped", ::apache::thrift::protocol::T_I64, 8);
        xfer += oprot->writeI64(this->cp_blocks_skipped);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.msg_bytes_in)
    {
        xfer += oprot->writeFieldBegin("msg_bytes_in", ::apache::thrift::protocol::T_I64, 9);
        xfer += oprot->writeI64(this->msg_bytes_in);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.msg_bytes_out)
    {
        xfer += oprot->writeFieldBegin("msg_bytes_out", ::apache::thrift::protocol::T_I64, 10);
        xfer += oprot->writeI64(this->msg_bytes_out);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.rows)
    {
        xfer += oprot->writeFieldBegin("rows", ::apache::thrift::protocol::T_I64, 11);
        xfer += oprot->writeI64(this->rows);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.start_time)
    {
        xfer += oprot->writeFieldBegin("start_time", ::apache::thrift::protocol::T_I64, 12);
        xfer += oprot->writeI64(this->start_time);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.end_time)
    {
        xfer += oprot->writeFieldBegin("end_time", ::apache::thrift::protocol::T_I64, 13);
        xfer += oprot->writeI64(this->end_time);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.error_no)
    {
        xfer += oprot->writeFieldBegin("error_no", ::apache::thrift::protocol::T_I64, 14);
        xfer += oprot->writeI64(this->error_no);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.blocks_changed)
    {
        xfer += oprot->writeFieldBegin("blocks_changed", ::apache::thrift::protocol::T_I64, 15);
        xfer += oprot->writeI64(this->blocks_changed);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.session_id)
    {
        xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 16);
        xfer += oprot->writeI64(this->session_id);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.query_type)
    {
        xfer += oprot->writeFieldBegin("query_type", ::apache::thrift::protocol::T_STRING, 17);
        xfer += oprot->writeString(this->query_type);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.query)
    {
        xfer += oprot->writeFieldBegin("query", ::apache::thrift::protocol::T_STRING, 18);
        xfer += oprot->writeString(this->query);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.user)
    {
        xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRING, 19);
        xfer += oprot->writeString(this->user);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.host)
    {
        xfer += oprot->writeFieldBegin("host", ::apache::thrift::protocol::T_STRING, 20);
        xfer += oprot->writeString(this->host);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.priority)
    {
        xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_STRING, 21);
        xfer += oprot->writeString(this->priority);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.priority_level)
    {
        xfer += oprot->writeFieldBegin("priority_level", ::apache::thrift::protocol::T_I32, 22);
        xfer += oprot->writeI32(this->priority_level);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.system_name)
    {
        xfer += oprot->writeFieldBegin("system_name", ::apache::thrift::protocol::T_STRING, 23);
        xfer += oprot->writeString(this->system_name);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.module_name)
    {
        xfer += oprot->writeFieldBegin("module_name", ::apache::thrift::protocol::T_STRING, 24);
        xfer += oprot->writeString(this->module_name);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.local_query)
    {
        xfer += oprot->writeFieldBegin("local_query", ::apache::thrift::protocol::T_I32, 25);
        xfer += oprot->writeI32(this->local_query);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.schema_name)
    {
        xfer += oprot->writeFieldBegin("schema_name", ::apache::thrift::protocol::T_STRING, 26);
        xfer += oprot->writeString(this->schema_name);
        xfer += oprot->writeFieldEnd();
    }

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(QueryTele& a, QueryTele& b)
{
    using ::std::swap;
    swap(a.query_uuid, b.query_uuid);
    swap(a.msg_type, b.msg_type);
    swap(a.max_mem_pct, b.max_mem_pct);
    swap(a.num_files, b.num_files);
    swap(a.phy_io, b.phy_io);
    swap(a.cache_io, b.cache_io);
    swap(a.msg_rcv_cnt, b.msg_rcv_cnt);
    swap(a.cp_blocks_skipped, b.cp_blocks_skipped);
    swap(a.msg_bytes_in, b.msg_bytes_in);
    swap(a.msg_bytes_out, b.msg_bytes_out);
    swap(a.rows, b.rows);
    swap(a.start_time, b.start_time);
    swap(a.end_time, b.end_time);
    swap(a.error_no, b.error_no);
    swap(a.blocks_changed, b.blocks_changed);
    swap(a.session_id, b.session_id);
    swap(a.query_type, b.query_type);
    swap(a.query, b.query);
    swap(a.user, b.user);
    swap(a.host, b.host);
    swap(a.priority, b.priority);
    swap(a.priority_level, b.priority_level);
    swap(a.system_name, b.system_name);
    swap(a.module_name, b.module_name);
    swap(a.local_query, b.local_query);
    swap(a.schema_name, b.schema_name);
    swap(a.__isset, b.__isset);
}

const char* StepTele::ascii_fingerprint = "4E40C17AE92DFF833A8CC23318F4FE68";
const uint8_t StepTele::binary_fingerprint[16] = {0x4E, 0x40, 0xC1, 0x7A, 0xE9, 0x2D, 0xFF, 0x83, 0x3A, 0x8C, 0xC2, 0x33, 0x18, 0xF4, 0xFE, 0x68};

uint32_t StepTele::read(::apache::thrift::protocol::TProtocol* iprot)
{

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true)
    {
        xfer += iprot->readFieldBegin(fname, ftype, fid);

        if (ftype == ::apache::thrift::protocol::T_STOP)
        {
            break;
        }

        switch (fid)
        {
            case 1:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->query_uuid);
                    this->__isset.query_uuid = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 2:
                if (ftype == ::apache::thrift::protocol::T_I32)
                {
                    int32_t ecast1;
                    xfer += iprot->readI32(ecast1);
                    this->msg_type = (STType::type)ecast1;
                    this->__isset.msg_type = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 3:
                if (ftype == ::apache::thrift::protocol::T_I32)
                {
                    int32_t ecast2;
                    xfer += iprot->readI32(ecast2);
                    this->step_type = (StepType::type)ecast2;
                    this->__isset.step_type = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 4:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->step_uuid);
                    this->__isset.step_uuid = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 5:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->phy_io);
                    this->__isset.phy_io = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 6:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->cache_io);
                    this->__isset.cache_io = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 7:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->msg_rcv_cnt);
                    this->__isset.msg_rcv_cnt = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 8:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->cp_blocks_skipped);
                    this->__isset.cp_blocks_skipped = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 9:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->msg_bytes_in);
                    this->__isset.msg_bytes_in = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 10:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->msg_bytes_out);
                    this->__isset.msg_bytes_out = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 11:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->rows);
                    this->__isset.rows = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 12:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->start_time);
                    this->__isset.start_time = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 13:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->end_time);
                    this->__isset.end_time = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 14:
                if (ftype == ::apache::thrift::protocol::T_I32)
                {
                    xfer += iprot->readI32(this->total_units_of_work);
                    this->__isset.total_units_of_work = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 15:
                if (ftype == ::apache::thrift::protocol::T_I32)
                {
                    xfer += iprot->readI32(this->units_of_work_completed);
                    this->__isset.units_of_work_completed = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            default:
                xfer += iprot->skip(ftype);
                break;
        }

        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t StepTele::write(::apache::thrift::protocol::TProtocol* oprot) const
{
    uint32_t xfer = 0;
    xfer += oprot->writeStructBegin("StepTele");

    xfer += oprot->writeFieldBegin("query_uuid", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->query_uuid);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("msg_type", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->msg_type);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("step_type", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->step_type);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("step_uuid", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->step_uuid);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.phy_io)
    {
        xfer += oprot->writeFieldBegin("phy_io", ::apache::thrift::protocol::T_I64, 5);
        xfer += oprot->writeI64(this->phy_io);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.cache_io)
    {
        xfer += oprot->writeFieldBegin("cache_io", ::apache::thrift::protocol::T_I64, 6);
        xfer += oprot->writeI64(this->cache_io);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.msg_rcv_cnt)
    {
        xfer += oprot->writeFieldBegin("msg_rcv_cnt", ::apache::thrift::protocol::T_I64, 7);
        xfer += oprot->writeI64(this->msg_rcv_cnt);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.cp_blocks_skipped)
    {
        xfer += oprot->writeFieldBegin("cp_blocks_skipped", ::apache::thrift::protocol::T_I64, 8);
        xfer += oprot->writeI64(this->cp_blocks_skipped);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.msg_bytes_in)
    {
        xfer += oprot->writeFieldBegin("msg_bytes_in", ::apache::thrift::protocol::T_I64, 9);
        xfer += oprot->writeI64(this->msg_bytes_in);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.msg_bytes_out)
    {
        xfer += oprot->writeFieldBegin("msg_bytes_out", ::apache::thrift::protocol::T_I64, 10);
        xfer += oprot->writeI64(this->msg_bytes_out);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.rows)
    {
        xfer += oprot->writeFieldBegin("rows", ::apache::thrift::protocol::T_I64, 11);
        xfer += oprot->writeI64(this->rows);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.start_time)
    {
        xfer += oprot->writeFieldBegin("start_time", ::apache::thrift::protocol::T_I64, 12);
        xfer += oprot->writeI64(this->start_time);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.end_time)
    {
        xfer += oprot->writeFieldBegin("end_time", ::apache::thrift::protocol::T_I64, 13);
        xfer += oprot->writeI64(this->end_time);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.total_units_of_work)
    {
        xfer += oprot->writeFieldBegin("total_units_of_work", ::apache::thrift::protocol::T_I32, 14);
        xfer += oprot->writeI32(this->total_units_of_work);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.units_of_work_completed)
    {
        xfer += oprot->writeFieldBegin("units_of_work_completed", ::apache::thrift::protocol::T_I32, 15);
        xfer += oprot->writeI32(this->units_of_work_completed);
        xfer += oprot->writeFieldEnd();
    }

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(StepTele& a, StepTele& b)
{
    using ::std::swap;
    swap(a.query_uuid, b.query_uuid);
    swap(a.msg_type, b.msg_type);
    swap(a.step_type, b.step_type);
    swap(a.step_uuid, b.step_uuid);
    swap(a.phy_io, b.phy_io);
    swap(a.cache_io, b.cache_io);
    swap(a.msg_rcv_cnt, b.msg_rcv_cnt);
    swap(a.cp_blocks_skipped, b.cp_blocks_skipped);
    swap(a.msg_bytes_in, b.msg_bytes_in);
    swap(a.msg_bytes_out, b.msg_bytes_out);
    swap(a.rows, b.rows);
    swap(a.start_time, b.start_time);
    swap(a.end_time, b.end_time);
    swap(a.total_units_of_work, b.total_units_of_work);
    swap(a.units_of_work_completed, b.units_of_work_completed);
    swap(a.__isset, b.__isset);
}

const char* ImportTele::ascii_fingerprint = "9C47642F47F2AFBEA98238934EB1A211";
const uint8_t ImportTele::binary_fingerprint[16] = {0x9C, 0x47, 0x64, 0x2F, 0x47, 0xF2, 0xAF, 0xBE, 0xA9, 0x82, 0x38, 0x93, 0x4E, 0xB1, 0xA2, 0x11};

uint32_t ImportTele::read(::apache::thrift::protocol::TProtocol* iprot)
{

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true)
    {
        xfer += iprot->readFieldBegin(fname, ftype, fid);

        if (ftype == ::apache::thrift::protocol::T_STOP)
        {
            break;
        }

        switch (fid)
        {
            case 1:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->job_uuid);
                    this->__isset.job_uuid = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 2:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->import_uuid);
                    this->__isset.import_uuid = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 3:
                if (ftype == ::apache::thrift::protocol::T_I32)
                {
                    int32_t ecast3;
                    xfer += iprot->readI32(ecast3);
                    this->msg_type = (ITType::type)ecast3;
                    this->__isset.msg_type = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 4:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->start_time);
                    this->__isset.start_time = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 5:
                if (ftype == ::apache::thrift::protocol::T_I64)
                {
                    xfer += iprot->readI64(this->end_time);
                    this->__isset.end_time = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 6:
                if (ftype == ::apache::thrift::protocol::T_LIST)
                {
                    {
                        this->table_list.clear();
                        uint32_t _size4;
                        ::apache::thrift::protocol::TType _etype7;
                        xfer += iprot->readListBegin(_etype7, _size4);
                        this->table_list.resize(_size4);
                        uint32_t _i8;

                        for (_i8 = 0; _i8 < _size4; ++_i8)
                        {
                            xfer += iprot->readString(this->table_list[_i8]);
                        }

                        xfer += iprot->readListEnd();
                    }
                    this->__isset.table_list = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 7:
                if (ftype == ::apache::thrift::protocol::T_LIST)
                {
                    {
                        this->rows_so_far.clear();
                        uint32_t _size9;
                        ::apache::thrift::protocol::TType _etype12;
                        xfer += iprot->readListBegin(_etype12, _size9);
                        this->rows_so_far.resize(_size9);
                        uint32_t _i13;

                        for (_i13 = 0; _i13 < _size9; ++_i13)
                        {
                            xfer += iprot->readI64(this->rows_so_far[_i13]);
                        }

                        xfer += iprot->readListEnd();
                    }
                    this->__isset.rows_so_far = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 8:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->system_name);
                    this->__isset.system_name = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 9:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->module_name);
                    this->__isset.module_name = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            case 10:
                if (ftype == ::apache::thrift::protocol::T_STRING)
                {
                    xfer += iprot->readString(this->schema_name);
                    this->__isset.schema_name = true;
                }
                else
                {
                    xfer += iprot->skip(ftype);
                }

                break;

            default:
                xfer += iprot->skip(ftype);
                break;
        }

        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t ImportTele::write(::apache::thrift::protocol::TProtocol* oprot) const
{
    uint32_t xfer = 0;
    xfer += oprot->writeStructBegin("ImportTele");

    xfer += oprot->writeFieldBegin("job_uuid", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->job_uuid);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("import_uuid", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->import_uuid);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("msg_type", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->msg_type);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.start_time)
    {
        xfer += oprot->writeFieldBegin("start_time", ::apache::thrift::protocol::T_I64, 4);
        xfer += oprot->writeI64(this->start_time);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.end_time)
    {
        xfer += oprot->writeFieldBegin("end_time", ::apache::thrift::protocol::T_I64, 5);
        xfer += oprot->writeI64(this->end_time);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.table_list)
    {
        xfer += oprot->writeFieldBegin("table_list", ::apache::thrift::protocol::T_LIST, 6);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->table_list.size()));
            std::vector<std::string> ::const_iterator _iter14;

            for (_iter14 = this->table_list.begin(); _iter14 != this->table_list.end(); ++_iter14)
            {
                xfer += oprot->writeString((*_iter14));
            }

            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.rows_so_far)
    {
        xfer += oprot->writeFieldBegin("rows_so_far", ::apache::thrift::protocol::T_LIST, 7);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->rows_so_far.size()));
            std::vector<int64_t> ::const_iterator _iter15;

            for (_iter15 = this->rows_so_far.begin(); _iter15 != this->rows_so_far.end(); ++_iter15)
            {
                xfer += oprot->writeI64((*_iter15));
            }

            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.system_name)
    {
        xfer += oprot->writeFieldBegin("system_name", ::apache::thrift::protocol::T_STRING, 8);
        xfer += oprot->writeString(this->system_name);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.module_name)
    {
        xfer += oprot->writeFieldBegin("module_name", ::apache::thrift::protocol::T_STRING, 9);
        xfer += oprot->writeString(this->module_name);
        xfer += oprot->writeFieldEnd();
    }

    if (this->__isset.schema_name)
    {
        xfer += oprot->writeFieldBegin("schema_name", ::apache::thrift::protocol::T_STRING, 10);
        xfer += oprot->writeString(this->schema_name);
        xfer += oprot->writeFieldEnd();
    }

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(ImportTele& a, ImportTele& b)
{
    using ::std::swap;
    swap(a.job_uuid, b.job_uuid);
    swap(a.import_uuid, b.import_uuid);
    swap(a.msg_type, b.msg_type);
    swap(a.start_time, b.start_time);
    swap(a.end_time, b.end_time);
    swap(a.table_list, b.table_list);
    swap(a.rows_so_far, b.rows_so_far);
    swap(a.system_name, b.system_name);
    swap(a.module_name, b.module_name);
    swap(a.schema_name, b.schema_name);
    swap(a.__isset, b.__isset);
}

} // namespace
